name: Terraform Apply - Custom
on:
  workflow_dispatch:
    inputs:
      location: 
        description: 'Azure Region to deploy resources'
        required: true
        default: 'northeurope'
        type: choice
        options:
          - 'northeurope'
          - 'francecentral'
          - 'eastus2'
          - 'southeastasia'
      firewall: 
        description: 'Include an Azure Firewall'
        required: true
        default: true
        type: boolean
      gateway: 
        description: 'Include a VPN Gateway'
        required: true
        default: false
        type: boolean
      bastion: 
        description: 'Include an Azure Bastion'
        required: true
        default: true
        type: boolean
      spokeDNS:
        description: 'Include a spoke with a Private DNS Resolver'
        required: true
        default: true
        type: boolean
      spokeDMZ: 
        description: 'Include a spoke with a Application Gateway'
        required: true
        default: true
        type: boolean
      privateMonitoring: 
        description: 'Include a spoke with a Private Monitoring Solution'
        required: true
        default: false
        type: boolean
      connectionMonitor: 
        description: 'Include Connection Monitor tests'
        required: true
        default: false
        type: boolean
      updateManagement: 
        description: 'Include Update Management configuration'
        required: true
        default: false
        type: boolean
      backup: 
        description: 'Include Backup configuration'
        required: true
        default: false
        type: boolean
      networkSecurityGroup: 
        description: 'Include Network Security Group configuration'
        required: true
        default: false
        type: boolean
      spokesCount:
        description: 'Number of Spokes to deploy'
        required: true
        default: '2'
        type: number
      virtualMachines:
        description: 'Include Virtual Machines in the Spokes'
        required: true
        default: true
        type: boolean
      standaloneSite:
        description: 'Include a standalone site'
        required: true
        default: false
        type: boolean
jobs:
  build:
    name: Terraform Apply
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Prepare environment variables
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: | 
          # Parse Azure secret into Terraform variables
          echo "ARM_CLIENT_ID=$( jq -r '.clientId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV;
          echo "ARM_CLIENT_SECRET=$( jq -r '.clientSecret' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV;
          echo "ARM_SUBSCRIPTION_ID=$( jq -r '.subscriptionId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV;
          echo "ARM_TENANT_ID=$( jq -r '.tenantId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV
        shell: bash          

      - name: Terraform Init
        id: init
        run: terraform -chdir=demo init

      - name: Terraform Apply
        id: apply
        env:
          TF_VAR_location: ${{ github.event.inputs.location }}
          TF_VAR_firewall: ${{ github.event.inputs.firewall }}
          TF_VAR_gateway: ${{ github.event.inputs.gateway }}
          TF_VAR_bastion: ${{ github.event.inputs.bastion }}
          TF_VAR_spoke_dns: ${{ github.event.inputs.spokeDNS }}
          TF_VAR_spoke_dmz: ${{ github.event.inputs.spokeDMZ }}
          TF_VAR_private_monitoring: ${{ github.event.inputs.privateMonitoring }}
          TF_VAR_connection_monitor: ${{ github.event.inputs.connectionMonitor }}
          TF_VAR_update_management: ${{ github.event.inputs.updateManagement }}
          TF_VAR_backup: ${{ github.event.inputs.backup }}
          TF_VAR_network_security_group: ${{ github.event.inputs.networkSecurityGroup }}
          TF_VAR_spokes_count: ${{ github.event.inputs.spokesCount }}
          TF_VAR_virtual_machines: ${{ github.event.inputs.virtualMachines }}
          TF_VAR_standalone_site: ${{ github.event.inputs.standaloneSite }}
        run: terraform -chdir=demo apply -auto-approve -no-color
